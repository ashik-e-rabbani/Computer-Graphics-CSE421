/*	Ashik-E-Rabbani
 *	Daffodil International University
 */

#include<windows.h>
#include <GL/glut.h>
#include<stdlib.h>
#include<string.h>
#include <math.h>

void display(void)
{
/*	clear all pixels  */
	glClear(GL_COLOR_BUFFER_BIT);

/*	draw white polygon (rectangle) with corners at
 *	(0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
 */
float x1=-4,y1=-5,x2=5,y2=3;

float x=x1,y=y1,m = (y2-y1)/(x2-x1);




/*
 	for(int i=0;i<360;i++)
    {
        theta = i*3.142/180;

         glVertex2f(5+1*cosf(theta),7+1*sinf(theta));
    }

  */


  glColor4f (1.0, 1.0, 0.9,1.0);
 	glBegin(GL_LINES);
    if(0<m<=1){

    while(x!=x2){
          x = x+1;
        y = y+m;
        glVertex2f(x,y);
    }







}

   glEnd(); //


 glColor4f (1.0, 1.0, 0.9,1.0);
 	glBegin(GL_LINES);

 glVertex2f(x1,y1);
 glVertex2f(x2,y2);
   glEnd();





   glFlush();
}

void init (void)
{
/* select clearing color 	*/
   glClearColor (0.0, 0.0, 0.0, 0.0);

/* initialize viewing values  */
   //glLoadIdentity();
   glOrtho(-9, 9, -9, 9, -9, 9);
}

/*
 * Declare initial window size, position, and display mode
 * (single buffer and RGBA).  Open window with "hello"
 * in its title bar.  Call initialization routines.
 * Register callback function to display graphics.
 * Enter main loop and process events.
 */

int main()
{
   glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);  //Mode for later glutCreateWindow() call
   glutInitWindowSize (700, 700);
   glutInitWindowPosition (0, 0);
   glutCreateWindow("DDA");
   //for transparet bg
   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); glEnable( GL_BLEND ); glClearColor(0.0,0.0,0.0,0.0);
   // end bg
   init();

   glutDisplayFunc(display);
   glutMainLoop();
   return 0;
}
